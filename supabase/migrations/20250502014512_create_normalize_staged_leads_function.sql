-- Create the normalized_leads table if it doesn't exist
-- (Schema based on ARRAYFORMULAforSQL.sql)
CREATE TABLE IF NOT EXISTS public.normalized_leads (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    original_lead_id BIGINT, -- Optional: Link back to the source row ID in 'leads' staging table
    contact_name TEXT,
    contact_email TEXT,
    property_address TEXT,
    property_city TEXT,
    property_state TEXT,
    property_postal_code TEXT,
    property_type TEXT,
    baths TEXT, -- Using TEXT as source might have values like '2.5'
    beds INTEGER,
    year_built INTEGER,
    square_footage INTEGER,
    wholesale_value NUMERIC,
    assessed_total NUMERIC,
    mls_curr_status TEXT,
    mls_curr_days_on_market INTEGER
);

-- Add indexes for faster lookups
CREATE INDEX IF NOT EXISTS idx_normalized_leads_email ON public.normalized_leads(contact_email);
CREATE INDEX IF NOT EXISTS idx_normalized_leads_property_address ON public.normalized_leads(property_address);

-- Create or replace the function to normalize data from 'leads' staging table
CREATE OR REPLACE FUNCTION public.normalize_staged_leads()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER -- Important: Allows the function to run with elevated privileges if needed (e.g., bypassing RLS on source table)
AS $$
BEGIN
    -- Clear the target table before inserting new normalized data
    -- Consider if appending or updating existing records is ever needed.
    -- If uploads are always full replacements, TRUNCATE is efficient.
    TRUNCATE TABLE public.normalized_leads;

    -- Insert normalized data from the 'leads' staging table
    INSERT INTO public.normalized_leads (
        original_lead_id,
        contact_name, contact_email,
        property_address, property_city, property_state, property_postal_code,
        property_type, baths, beds, year_built, square_footage,
        wholesale_value, assessed_total, mls_curr_status, mls_curr_days_on_market
    )
    -- Block 1: Contact 1
    SELECT
        leads.id, -- Assuming 'leads' staging table has an 'id' primary key
        leads.contact1name, leads.contact1email_1,
        leads.propertyaddress, leads.propertycity, leads.propertystate, leads.propertypostalcode,
        leads.propertytype, leads.baths::TEXT, leads.beds, leads.yearbuilt, leads.squarefootage,
        leads.wholesalevalue, leads.assessedtotal, leads.mls_curr_status, leads.mls_curr_daysonmarket
    FROM
        public.leads
    WHERE
        leads.contact1name IS NOT NULL AND trim(leads.contact1name) <> ''
        AND leads.contact1email_1 IS NOT NULL AND trim(leads.contact1email_1) <> ''

    UNION ALL

    -- Block 2: Contact 2
    SELECT
        leads.id,
        leads.contact2name, leads.contact2email_1,
        leads.propertyaddress, leads.propertycity, leads.propertystate, leads.propertypostalcode,
        leads.propertytype, leads.baths::TEXT, leads.beds, leads.yearbuilt, leads.squarefootage,
        leads.wholesalevalue, leads.assessedtotal, leads.mls_curr_status, leads.mls_curr_daysonmarket
    FROM
        public.leads
    WHERE
        leads.contact2name IS NOT NULL AND trim(leads.contact2name) <> ''
        AND leads.contact2email_1 IS NOT NULL AND trim(leads.contact2email_1) <> ''

    UNION ALL

    -- Block 3: Contact 3
    SELECT
        leads.id,
        leads.contact3name, leads.contact3email_1,
        leads.propertyaddress, leads.propertycity, leads.propertystate, leads.propertypostalcode,
        leads.propertytype, leads.baths::TEXT, leads.beds, leads.yearbuilt, leads.squarefootage,
        leads.wholesalevalue, leads.assessedtotal, leads.mls_curr_status, leads.mls_curr_daysonmarket
    FROM
        public.leads
    WHERE
        leads.contact3name IS NOT NULL AND trim(leads.contact3name) <> ''
        AND leads.contact3email_1 IS NOT NULL AND trim(leads.contact3email_1) <> ''

    UNION ALL

    -- Block 4: MLS Current Agent
    SELECT
        leads.id,
        leads.mls_curr_listagentname, leads.mls_curr_listagentemail,
        leads.propertyaddress, leads.propertycity, leads.propertystate, leads.propertypostalcode,
        leads.propertytype, leads.baths::TEXT, leads.beds, leads.yearbuilt, leads.squarefootage,
        leads.wholesalevalue, leads.assessedtotal, leads.mls_curr_status, leads.mls_curr_daysonmarket
    FROM
        public.leads
    WHERE
        leads.mls_curr_listagentname IS NOT NULL AND trim(leads.mls_curr_listagentname) <> ''
        AND leads.mls_curr_listagentemail IS NOT NULL AND trim(leads.mls_curr_listagentemail) <> '';

    -- Optional: Clear the staging table after successful normalization
    -- TRUNCATE TABLE public.leads;

END;
$$;